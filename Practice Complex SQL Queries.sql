DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS (USER_ID INT PRIMARY KEY,
					USER_NAME VARCHAR(30) NOT NULL,
					EMAIL VARCHAR(50));

INSERT INTO USERS VALUES
						(1, 'SUMIT', 'SUMIT@GMAIL.COM'),
						(2, 'RESHMA', 'RESHMA@GMAIL.COM'),
						(3, 'FARHANA', 'FARHANA@GMAIL.COM'),
						(4, 'ROBIN', 'ROBIN@GMAIL.COM'),
						(5, 'ROBIN', 'ROBIN@GMAIL.COM');

SELECT * FROM USERS;

-- 1. WRITE A SQL QUERY TO FETCH ALL THE DUPLICATE RECORDS IN A TABLE.
SELECT USER_ID, USER_NAME, EMAIL
FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY USER_NAME ORDER BY USER_ID) AS RN
	  FROM USERS U
	  ORDER BY USER_ID OFFSET 0 ROWS) X
WHERE X.RN != 1;
------------------------------------------------------------------------------------------------
DROP TABLE IF EXISTS EMPLOYEE;
CREATE TABLE EMPLOYEE (EMP_ID INT PRIMARY KEY, 
					   EMP_NAME VARCHAR(50) NOT NULL, 
					   DEPT_NAME VARCHAR(50), 
					   SALARY INT);

INSERT INTO EMPLOYEE VALUES(101, 'MOHAN', 'ADMIN', 4000);
INSERT INTO EMPLOYEE VALUES(102, 'RAJKUMAR', 'HR', 3000);
INSERT INTO EMPLOYEE VALUES(103, 'AKBAR', 'IT', 4000);
INSERT INTO EMPLOYEE VALUES(104, 'DORVIN', 'FINANCE', 6500);
INSERT INTO EMPLOYEE VALUES(105, 'ROHIT', 'HR', 3000);
INSERT INTO EMPLOYEE VALUES(106, 'RAJESH',  'FINANCE', 5000);
INSERT INTO EMPLOYEE VALUES(107, 'PREET', 'HR', 7000);
INSERT INTO EMPLOYEE VALUES(108, 'MARYAM', 'ADMIN', 4000);
INSERT INTO EMPLOYEE VALUES(109, 'SANJAY', 'IT', 6500);
INSERT INTO EMPLOYEE VALUES(110, 'VASUDHA', 'IT', 7000);
INSERT INTO EMPLOYEE VALUES(111, 'MELINDA', 'IT', 8000);
INSERT INTO EMPLOYEE VALUES(112, 'KOMAL', 'IT', 10000);
INSERT INTO EMPLOYEE VALUES(113, 'GAUTHAM', 'ADMIN', 2000);
INSERT INTO EMPLOYEE VALUES(114, 'MANISHA', 'HR', 3000);
INSERT INTO EMPLOYEE VALUES(115, 'CHANDNI', 'IT', 4500);
INSERT INTO EMPLOYEE VALUES(116, 'SATYA', 'FINANCE', 6500);
INSERT INTO EMPLOYEE VALUES(117, 'ADARSH', 'HR', 3500);
INSERT INTO EMPLOYEE VALUES(118, 'TEJASWI', 'FINANCE', 5500);
INSERT INTO EMPLOYEE VALUES(119, 'CORY', 'HR', 8000);
INSERT INTO EMPLOYEE VALUES(120, 'MONICA', 'ADMIN', 5000);
INSERT INTO EMPLOYEE VALUES(121, 'ROSALIN', 'IT', 6000);
INSERT INTO EMPLOYEE VALUES(122, 'IBRAHIM', 'IT', 8000);
INSERT INTO EMPLOYEE VALUES(123, 'VIKRAM', 'IT', 8000);
INSERT INTO EMPLOYEE VALUES(124, 'DHEERAJ', 'IT', 11000);

SELECT *
FROM EMPLOYEE

-- 2. WRITE A SQL QUERY TO FETCH THE SECOND LAST RECORD FROM EMPLOYEE TABLE.
SELECT TOP 1 *
FROM (SELECT TOP 2 * FROM EMPLOYEE
	  ORDER BY EMP_ID DESC) AS X
ORDER BY X.EMP_ID;

SELECT *
FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY EMP_ID DESC) AS RN
	  FROM EMPLOYEE) AS X
WHERE X.RN = 2;

-- 3. WRITE A SQL QUERY TO DISPLAY ONLY THE DETAILS OF EMPLOYEES WHO EITHER EARN THE HIGHEST SALARY 
-- OR THE LOWEST SALARY IN EACH DEPARTMENT FROM THE EMPLOYEE TABLE.
SELECT DEPT_NAME, MAX(SALARY) AS H_SALARY, MIN(SALARY) AS L_SALARY
FROM EMPLOYEE
GROUP BY DEPT_NAME

SELECT X.*
FROM EMPLOYEE E
JOIN (SELECT *, MAX(SALARY) OVER (PARTITION BY DEPT_NAME) AS MAX_SALARY,
				MIN(SALARY) OVER (PARTITION BY DEPT_NAME) AS MIN_SALARY
	  FROM EMPLOYEE) X
ON E.EMP_ID = X.EMP_ID
AND (E.SALARY = X.MAX_SALARY OR E.SALARY = X.MIN_SALARY)
ORDER BY X.DEPT_NAME, X.SALARY;
-----------------------------------------------------------------------------------------------------------
DROP TABLE IF EXISTS DOCTORS;
CREATE TABLE DOCTORS (ID INT PRIMARY KEY,
					  NAME VARCHAR(50) NOT NULL,
					  SPECIALITY VARCHAR(100),
					  HOSPITAL VARCHAR(50),
					  CITY VARCHAR(50),
					  CONSULTATION_FEE INT);

INSERT INTO DOCTORS VALUES
						(1, 'DR. SHASHANK', 'AYURVEDA', 'APOLLO HOSPITAL', 'BANGALORE', 2500),
						(2, 'DR. ABDUL', 'HOMEOPATHY', 'FORTIS HOSPITAL', 'BANGALORE', 2000),
						(3, 'DR. SHWETHA', 'HOMEOPATHY', 'KMC HOSPITAL', 'MANIPAL', 1000),
						(4, 'DR. MURPHY', 'DERMATOLOGY', 'KMC HOSPITAL', 'MANIPAL', 1500),
						(5, 'DR. FARHANA', 'PHYSICIAN', 'GLENEAGLES HOSPITAL', 'BANGALORE', 1700),
						(6, 'DR. MARYAM', 'PHYSICIAN', 'GLENEAGLES HOSPITAL', 'BANGALORE', 1500);

SELECT * FROM DOCTORS;

-- 4.1 FROM THE DOCTORS TABLE, FETCH THE DETAILS OF DOCTORS WHO WORK IN THE SAME HOSPITAL BUT IN DIFFERENT SPECIALTY.
SELECT D1.ID, D1.NAME, D1.SPECIALITY, D1.HOSPITAL, D1.CITY, D1.CONSULTATION_FEE
FROM DOCTORS D1
JOIN DOCTORS D2
ON D1.HOSPITAL = D2.HOSPITAL 
AND D1.SPECIALITY != D2.SPECIALITY
AND D1.ID != D2.ID;

-- 4.2 FROM THE DOCTORS TABLE FIND THE DOCTORS WHO WORK IN SAME HOSPITAL IRRESPECTIVE OF THEIR SPECIALITY.
SELECT D1.ID, D1.NAME, D1.SPECIALITY, D1.HOSPITAL, D1.CITY, D1.CONSULTATION_FEE
FROM DOCTORS D1
JOIN DOCTORS D2
ON D1.HOSPITAL = D2.HOSPITAL
AND D1.ID != D2.ID;
--------------------------------------------------------------------------------------
DROP TABLE IF EXISTS LOGIN_DETAILS;
CREATE TABLE LOGIN_DETAILS(LOGIN_ID INT PRIMARY KEY,
						   USER_NAME VARCHAR(50) NOT NULL,
                           LOGIN_DATE DATE);

DELETE FROM LOGIN_DETAILS;
INSERT INTO LOGIN_DETAILS VALUES
								(101, 'MICHAEL', GETDATE()),
								(102, 'JAMES', GETDATE()),
								(103, 'STEWART', GETDATE() + 1),
								(104, 'STEWART', GETDATE() + 1),
								(105, 'STEWART', GETDATE() + 1),
								(106, 'MICHAEL', GETDATE() + 2),
								(107, 'MICHAEL', GETDATE() + 2),
								(108, 'STEWART', GETDATE() + 3),
								(109, 'STEWART', GETDATE() + 3),
								(110, 'JAMES', GETDATE() + 4),
								(111, 'JAMES', GETDATE() + 4),
								(112, 'JAMES', GETDATE() + 5),
								(113, 'JAMES', GETDATE() + 6);

SELECT * FROM LOGIN_DETAILS;

-- 5. FROM THE LOGIN_DETAILS TABLE, FETCH THE USERS WHO LOGGED IN CONSECUTIVELY 3 OR MORE TIMES.
SELECT DISTINCT REPEATED_NAMES
FROM (SELECT *,
		  CASE WHEN USER_NAME = LEAD(USER_NAME) OVER(ORDER BY LOGIN_ID)
			   AND  USER_NAME = LEAD(USER_NAME, 2) OVER(ORDER BY LOGIN_ID)
			   THEN USER_NAME 
			   ELSE NULL 
			   END AS REPEATED_NAMES
FROM LOGIN_DETAILS) X
WHERE X.REPEATED_NAMES IS NOT NULL;