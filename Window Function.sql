-- WINDOW FUNCTION (ANALYTIC FUNCTION):
 
SELECT *
FROM EMPLOYEE; 
 
SELECT DEPT_NAME, MAX(SALARY) AS MAX_SALARY
FROM EMPLOYEE 
GROUP BY DEPT_NAME; 

SELECT *, MAX(SALARY) OVER() AS MAX_SALARY
FROM EMPLOYEE;

SELECT *, MAX(SALARY) OVER(PARTITION BY DEPT_NAME) AS MAX_SALARY
FROM EMPLOYEE;

-- ROW_NUMBER
SELECT *, ROW_NUMBER() OVER(ORDER BY EMP_ID) AS RN
FROM EMPLOYEE;

SELECT *, ROW_NUMBER() OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS RN
FROM EMPLOYEE;

-- FETCH THE FIRST 2 EMPLOYEES FROM EACH DEPARTMENT TO JOIN THE COMPANY
SELECT *
FROM 
	(SELECT *, ROW_NUMBER() OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS RN
	 FROM EMPLOYEE) AS R
WHERE R.RN < 3;

-- RANK AND DENSE RANK
SELECT *, RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RANK_SALARY
FROM EMPLOYEE;

SELECT *, DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS DENSE_RANK_SALARY
FROM EMPLOYEE;

SELECT *,
	RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RANK_SALARY,
	DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS DENSE_RANK_SALARY
FROM EMPLOYEE;

SELECT *,
	RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RANK_SALARY,
	DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS DENSE_RANK_SALARY,
	ROW_NUMBER() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RN
FROM EMPLOYEE;

-- FETCH THE TOP 3 EMPLOYEES IN EACH DEPARTMENT EARNING THE MAX SALARY
SELECT *
FROM 
	(SELECT *, RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RANK_SALARY
	FROM EMPLOYEE) AS RK
WHERE RK.RANK_SALARY < 4;

SELECT *
FROM 
	(SELECT *, DENSE_RANK() OVER(PARTITION BY DEPT_NAME ORDER BY SALARY DESC) AS RANK_SALARY
	FROM EMPLOYEE) AS RK
WHERE RK.RANK_SALARY < 4;

-- LAG AND LEAD
-- LAG
-- FETCH A QUERY TO DISPLAY IF THE SALARY OF AN EMPLOYEE IS HIGHER, LOWER OR EQUAL TO PREVIOUS EMPLOYEE
SELECT *, LAG(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS PREV_EMP_SALARY
FROM EMPLOYEE;

SELECT *, LAG(SALARY, 2, 0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS PREV_EMP_SALARY
FROM EMPLOYEE;

-- LEAD
-- FETCH A QUERY TO DISPLAY IF THE SALARY OF AN EMPLOYEE IS HIGHER, LOWER OR EQUAL TO NEXT EMPLOYEE
SELECT *, LEAD(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS NEXT_EMP_SALARY
FROM EMPLOYEE;

SELECT *, LEAD(SALARY, 2, 0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS NEXT_EMP_SALARY
FROM EMPLOYEE;

-- LAG AND LEAD
-- FETCH A QUERY TO DISPLAY IF THE SALARY OF AN EMPLOYEE IS HIGHER, LOWER OR EQUAL TO PREVIOUS AND NEXT EMPLOYEE
SELECT *, 
	LAG(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS PREV_EMP_SALARY,
	LEAD(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS NEXT_EMP_SALARY
FROM EMPLOYEE;

SELECT *, 
	LAG(SALARY, 2, 0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS PREV_EMP_SALARY,
	LEAD(SALARY,2, 0) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS NEXT_EMP_SALARY
FROM EMPLOYEE;

-- FETCH A QUERY TO DISPLAY IF THE SALARY OF AN EMPLOYEE IS HIGHER, LOWER OR EQUAL TO PREVIOUS EMPLOYEE WITH NEW COLUMN
SELECT *, LAG(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) AS PREV_EMP_SALARY,
	CASE
		WHEN SALARY > LAG(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) THEN 'HIGHER THAN PREVIOUS EMPLOYEE'
		WHEN SALARY < LAG(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) THEN 'LOWER THAN PREVIOUS EMPLOYEE'
		WHEN SALARY = LAG(SALARY) OVER(PARTITION BY DEPT_NAME ORDER BY EMP_ID) THEN 'SAME AS PREVIOUS EMPLOYEE'
	END
FROM EMPLOYEE;