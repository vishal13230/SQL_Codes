CREATE DATABASE SUBQUERYDB;
USE SUBQUERYDB;

DROP TABLE IF EXISTS EMPLOYEE_HISTORY;
DROP TABLE IF EXISTS EMPLOYEE;
DROP TABLE IF EXISTS DEPARTMENT;
DROP TABLE IF EXISTS SALES;

CREATE TABLE DEPARTMENT (DEPT_ID INT,
						 DEPT_NAME VARCHAR(50) PRIMARY KEY,
	                     LOCATION VARCHAR(100));

INSERT INTO DEPARTMENT VALUES (1, 'ADMIN', 'BANGALORE');
INSERT INTO DEPARTMENT VALUES (2, 'HR', 'BANGALORE');
INSERT INTO DEPARTMENT VALUES (3, 'IT', 'BANGALORE');
INSERT INTO DEPARTMENT VALUES (4, 'FINANCE', 'MUMBAI');
INSERT INTO DEPARTMENT VALUES (5, 'MARKETING', 'BANGALORE');
INSERT INTO DEPARTMENT VALUES (6, 'SALES', 'MUMBAI');

CREATE TABLE EMPLOYEE (EMP_ID INT PRIMARY KEY,
			           EMP_NAME VARCHAR(50) NOT NULL,
			           DEPT_NAME VARCHAR(50) NOT NULL,
			           SALARY INT,
			           CONSTRAINT FK_EMP FOREIGN KEY(DEPT_NAME) REFERENCES DEPARTMENT(DEPT_NAME));

INSERT INTO EMPLOYEE VALUES(101, 'MOHAN', 'ADMIN', 4000);
INSERT INTO EMPLOYEE VALUES(102, 'RAJKUMAR', 'HR', 3000);
INSERT INTO EMPLOYEE VALUES(103, 'AKBAR', 'IT', 4000);
INSERT INTO EMPLOYEE VALUES(104, 'DORVIN', 'FINANCE', 6500);
INSERT INTO EMPLOYEE VALUES(105, 'ROHIT', 'HR', 3000);
INSERT INTO EMPLOYEE VALUES(106, 'RAJESH',  'FINANCE', 5000);
INSERT INTO EMPLOYEE VALUES(107, 'PREET', 'HR', 7000);
INSERT INTO EMPLOYEE VALUES(108, 'MARYAM', 'ADMIN', 4000);
INSERT INTO EMPLOYEE VALUES(109, 'SANJAY', 'IT', 6500);
INSERT INTO EMPLOYEE VALUES(110, 'VASUDHA', 'IT', 7000);
INSERT INTO EMPLOYEE VALUES(111, 'MELINDA', 'IT', 8000);
INSERT INTO EMPLOYEE VALUES(112, 'KOMAL', 'IT', 10000);
INSERT INTO EMPLOYEE VALUES(113, 'GAUTHAM', 'ADMIN', 2000);
INSERT INTO EMPLOYEE VALUES(114, 'MANISHA', 'HR', 3000);
INSERT INTO EMPLOYEE VALUES(115, 'CHANDNI', 'IT', 4500);
INSERT INTO EMPLOYEE VALUES(116, 'SATYA', 'FINANCE', 6500);
INSERT INTO EMPLOYEE VALUES(117, 'ADARSH', 'HR', 3500);
INSERT INTO EMPLOYEE VALUES(118, 'TEJASWI', 'FINANCE', 5500);
INSERT INTO EMPLOYEE VALUES(119, 'CORY', 'HR', 8000);
INSERT INTO EMPLOYEE VALUES(120, 'MONICA', 'ADMIN', 5000);
INSERT INTO EMPLOYEE VALUES(121, 'ROSALIN', 'IT', 6000);
INSERT INTO EMPLOYEE VALUES(122, 'IBRAHIM', 'IT', 8000);
INSERT INTO EMPLOYEE VALUES(123, 'VIKRAM', 'IT', 8000);
INSERT INTO EMPLOYEE VALUES(124, 'DHEERAJ', 'IT', 11000);

CREATE TABLE EMPLOYEE_HISTORY (EMP_ID INT PRIMARY KEY,
							   EMP_NAME VARCHAR(50) NOT NULL,
							   DEPT_NAME VARCHAR(50),
							   SALARY INT,
							   LOCATION VARCHAR(100),
							   CONSTRAINT FK_EMP_HIST_01 FOREIGN KEY(DEPT_NAME) REFERENCES DEPARTMENT(DEPT_NAME),
							   CONSTRAINT FK_EMP_HIST_02 FOREIGN KEY(EMP_ID) REFERENCES EMPLOYEE(EMP_ID));

CREATE TABLE SALES (STORE_ID INT,
					STORE_NAME VARCHAR(50),
					PRODUCT_NAME VARCHAR(50),
					QUANTITY INT,
					PRICE INT);

INSERT INTO SALES VALUES
					(1, 'APPLE STORE 1','IPHONE 13 PRO', 1, 1000),
					(1, 'APPLE STORE 1','MACBOOK PRO 14', 3, 6000),
					(1, 'APPLE STORE 1','AIRPODS PRO', 2, 500),
					(2, 'APPLE STORE 2','IPHONE 13 PRO', 2, 2000),
					(3, 'APPLE STORE 3','IPHONE 12 PRO', 1, 750),
					(3, 'APPLE STORE 3','MACBOOK PRO 14', 1, 2000),
					(3, 'APPLE STORE 3','MACBOOK AIR', 4, 4400),
					(3, 'APPLE STORE 3','IPHONE 13', 2, 1800),
					(3, 'APPLE STORE 3','AIRPODS PRO', 3, 750),
					(4, 'APPLE STORE 4','IPHONE 12 PRO', 2, 1500),
					(4, 'APPLE STORE 4','MACBOOK PRO 16', 1, 3500);

SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;
SELECT * FROM EMPLOYEE_HISTORY;
SELECT * FROM SALES;

-- INTRO : 
-- QUESTION: FIND THE EMPLOYEES WHO'S SALARY IS MORE THAN THE AVERAGE SALARY EARNED BY ALL EMPLOYEES.
SELECT *
FROM EMPLOYEE
WHERE SALARY > 
			(SELECT AVG(SALARY)
			 FROM EMPLOYEE);

SELECT E.*
FROM EMPLOYEE AS E
JOIN (SELECT AVG(SALARY) AS SALARY_COLUMN 
	  FROM EMPLOYEE) AS AVG_SAL
ON E.SALARY > AVG_SAL.SALARY_COLUMN;

-- TYPES OF SUBQUERY
-- 1.0 SCALAR SUBQUERY 
-- QUESTION: FIND THE EMPLOYEES WHO EARN MORE THAN THE AVERAGE SALARY EARNED BY ALL EMPLOYEES.
-- IT RETURN EXACTLY 1 ROW AND 1 COLUMN
SELECT *
FROM EMPLOYEE E
WHERE SALARY > 
			(SELECT AVG(SALARY) 
			 FROM EMPLOYEE)
ORDER BY E.SALARY;

SELECT E.*
FROM EMPLOYEE AS E
JOIN (SELECT AVG(SALARY) AS SALARY_COLUMN 
	  FROM EMPLOYEE) AS AVG_SAL
ON E.SALARY > AVG_SAL.SALARY_COLUMN
ORDER BY E.SALARY;

-- 2.0 MULTIPLE ROW SUBQUERY 
-- 2.1 MULTIPLE COLUMN, MULTIPLE ROW SUBQUERY
-- QUESTION: FIND THE EMPLOYEES WHO EARN THE HIGHEST SALARY IN EACH DEPARTMENT.
SELECT *
FROM EMPLOYEE
WHERE (DEPT_NAME, SALARY) IN
					   (SELECT DEPT_NAME,  MAX(SALARY)
						FROM EMPLOYEE
						GROUP BY DEPT_NAME)
ORDER BY DEPT_NAME, SALARY;

-- 2.2 SINGLE COLUMN, MULTIPLE ROW SUBQUERY
-- QUESTION: FIND DEPARTMENT WHO DO NOT HAVE ANY EMPLOYEES
SELECT *
FROM DEPARTMENT
WHERE DEPT_NAME NOT IN 
				(SELECT DISTINCT DEPT_NAME 
				 FROM EMPLOYEE);

-- 3.0 CORRELATED SUBQUERY 
-- A SUBQUERY WHICH IS RELATED TO THE OUTER QUERY
-- QUESTION: FIND THE EMPLOYEES IN EACH DEPARTMENT WHO EARN MORE THAN THE AVERAGE SALARY IN THAT DEPARTMENT.
SELECT *
FROM EMPLOYEE AS E
WHERE E.SALARY >
			(SELECT AVG(SALARY) AS AVG_SALARY
			 FROM EMPLOYEE AS E2
			 WHERE E2.DEPT_NAME = E.DEPT_NAME)
ORDER BY DEPT_NAME, SALARY;

-- QUESTION: FIND DEPARTMENT WHO DO NOT HAVE ANY EMPLOYEES.
SELECT *
FROM DEPARTMENT
WHERE DEPT_NAME NOT IN 
				(SELECT DISTINCT DEPT_NAME
				 FROM EMPLOYEE);

-- USING CORRELATED SUBQUERY 
SELECT * 
FROM DEPARTMENT D
WHERE NOT EXISTS
			 (SELECT 1 -- *
			  FROM EMPLOYEE E
			  WHERE D.DEPT_NAME = E.DEPT_NAME);

-- 4.0 SUBQUERY INSIDE SUBQUERY (NESTED QUERY/SUBQUERY)
-- QUESTION: FIND STORES WHO'S SALES WERE BETTER THAN THE AVERAGE SALES ACCROSS ALL STORES.
SELECT *
FROM (SELECT STORE_NAME, SUM(PRICE) AS TOTAL_SALES
	 FROM SALES
	 GROUP BY STORE_NAME) SALES
JOIN 
	(SELECT AVG(TOTAL_SALES) AS AVG_SALES
	 FROM (SELECT STORE_NAME, SUM(PRICE) AS TOTAL_SALES
		  FROM SALES
		  GROUP BY STORE_NAME) X) AVG_SALES
ON SALES.TOTAL_SALES > AVG_SALES.AVG_SALES;

WITH SALES AS
	(SELECT STORE_NAME, SUM(PRICE) AS TOTAL_SALES
	 FROM SALES
	 GROUP BY STORE_NAME)
SELECT *
FROM SALES
JOIN 
	(SELECT AVG(TOTAL_SALES) AS AVG_SALES 
	FROM SALES) AVG_SALES
ON SALES.TOTAL_SALES > AVG_SALES.AVG_SALES;