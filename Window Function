-- HTTPS://WWW.POSTGRESQLTUTORIAL.COM/POSTGRESQL-WINDOW-FUNCTION/

CREATE TABLE PRODUCT_GROUPS (GROUP_ID SERIAL PRIMARY KEY,
							 GROUP_NAME VARCHAR (255) NOT NULL);

CREATE TABLE PRODUCTS (PRODUCT_ID SERIAL PRIMARY KEY,
					   PRODUCT_NAME VARCHAR (255) NOT NULL,
					   PRICE DECIMAL (11, 2),
					   GROUP_ID INT NOT NULL,
					   FOREIGN KEY (GROUP_ID) REFERENCES PRODUCT_GROUPS (GROUP_ID));
					   
INSERT INTO PRODUCT_GROUPS (GROUP_NAME)
VALUES ('SMARTPHONE'), ('LAPTOP'), ('TABLET');

INSERT INTO PRODUCTS (PRODUCT_NAME, GROUP_ID,PRICE)
VALUES ('MICROSOFT LUMIA', 1, 200),
	   ('HTC ONE', 1, 400),
	   ('NEXUS', 1, 500),
	   ('IPHONE', 1, 900),
	   ('HP ELITE', 2, 1200),
	   ('LENOVO THINKPAD', 2, 700),
	   ('SONY VAIO', 2, 700),
	   ('DELL VOSTRO', 2, 800),
	   ('IPAD', 3, 700),
	   ('KINDLE FIRE', 3, 150),
	   ('SAMSUNG GALAXY TAB', 3, 200);

SELECT *
FROM PRODUCT_GROUPS;

SELECT *
FROM PRODUCTS;

SELECT AVG(PRICE)
FROM PRODUCTS;

SELECT GROUP_NAME, AVG(PRICE)
FROM PRODUCTS
INNER JOIN PRODUCT_GROUPS
USING (GROUP_ID)
GROUP BY GROUP_NAME;

SELECT PRODUCT_NAME, PRICE, GROUP_NAME,
	   AVG(PRICE) OVER (PARTITION BY GROUP_NAME)
FROM PRODUCTS
INNER JOIN PRODUCT_GROUPS USING (GROUP_ID);

-- CUME_DIST() FUNCTION
CREATE TABLE SALES_STATS(NAME VARCHAR(100) NOT NULL,
						 YEAR SMALLINT NOT NULL CHECK (YEAR > 0),
						 AMOUNT DECIMAL(10,2) CHECK (AMOUNT >= 0),
						 PRIMARY KEY (NAME,YEAR));
						 
INSERT INTO SALES_STATS(NAME, YEAR, AMOUNT)
VALUES ('JOHN DOE',2018,120000),
	   ('JANE DOE',2018,110000),
	   ('JACK DANIEL',2018,150000),
	   ('YIN YANG',2018,30000),
	   ('STEPHANE HEADY',2018,200000),
	   ('JOHN DOE',2019,150000),
	   ('JANE DOE',2019,130000),
	   ('JACK DANIEL',2019,180000),
	   ('YIN YANG',2019,25000),
	   ('STEPHANE HEADY',2019,270000);
INSERT INTO SALES_STATS(NAME, YEAR, AMOUNT) VALUES ('JOHN DOE', 2021, 125000);

SELECT *
FROM SALES_STATS;

EXPLAIN ANALYZE
SELECT NAME, YEAR, AMOUNT,
       CUME_DIST() OVER (ORDER BY AMOUNT) 
FROM SALES_STATS
WHERE YEAR = 2018;

SELECT NAME, YEAR, AMOUNT,
       CUME_DIST() OVER (ORDER BY AMOUNT) 
FROM SALES_STATS
WHERE YEAR = 2019;

SELECT NAME, YEAR, AMOUNT,
       CUME_DIST() OVER (PARTITION BY NAME ORDER BY AMOUNT)
FROM SALES_STATS;

-- ROW_NUMBER() FUNCTION
SELECT PRODUCT_ID, PRODUCT_NAME, GROUP_ID,
	   ROW_NUMBER() OVER (ORDER BY PRODUCT_ID)
FROM PRODUCTS;

SELECT PRODUCT_ID, PRODUCT_NAME, GROUP_ID,
	   ROW_NUMBER() OVER (PARTITION BY GROUP_ID ORDER BY PRODUCT_NAME)
FROM PRODUCTS;

SELECT DISTINCT PRICE,
	   ROW_NUMBER () OVER (ORDER BY PRICE)
FROM PRODUCTS
ORDER BY PRICE;

WITH PRICES AS (SELECT DISTINCT PRICE
	            FROM PRODUCTS) 
SELECT PRICE,
	   ROW_NUMBER () OVER (ORDER BY PRICE)
FROM PRICES;

SELECT PRICE,
	   ROW_NUMBER () OVER (ORDER BY PRICE)
FROM (SELECT DISTINCT PRICE
	  FROM PRODUCTS) PRICES;
	  
SELECT *
FROM (SELECT PRODUCT_ID, PRODUCT_NAME, PRICE,
			 ROW_NUMBER () OVER (ORDER BY PRODUCT_NAME)
	  FROM PRODUCTS) X
WHERE ROW_NUMBER BETWEEN 6 AND 10;

SELECT *
FROM PRODUCTS
WHERE PRICE = (SELECT PRICE
		       FROM (SELECT PRICE,
					 ROW_NUMBER () OVER (ORDER BY PRICE DESC) NTH
				     FROM (SELECT DISTINCT (PRICE)
						   FROM PRODUCTS) PRICES) SORTED_PRICES
		                   WHERE NTH = 3);

-- RANK() AND DENSE_RANK() FUNCTION
CREATE TABLE RANK_VS_DENSE_RANKS (C VARCHAR(10));

INSERT INTO RANK_VS_DENSE_RANKS(C)
VALUES('A'),('A'),('B'),('C'),('C'),('D'),('E');

SELECT *
FROM RANK_VS_DENSE_RANKS;

SELECT C,
	   RANK() OVER (ORDER BY C) RANK_NUMBER,
	   DENSE_RANK() OVER (ORDER BY C) DENSE_RANK_NUMBER
FROM RANK_VS_DENSE_RANKS;

SELECT PRODUCT_ID, PRODUCT_NAME, PRICE,
	   RANK() OVER (ORDER BY PRICE DESC) PRICE_RANK,
	   DENSE_RANK () OVER (ORDER BY PRICE DESC) PRICE_DENSE_RANK 
FROM PRODUCTS;

SELECT PRODUCT_ID, PRODUCT_NAME, GROUP_ID, PRICE,
	   RANK() OVER (PARTITION BY GROUP_ID ORDER BY PRICE DESC) PRICE_RANK,
	   DENSE_RANK() OVER (PARTITION BY GROUP_ID ORDER BY PRICE DESC) PRICE_DENSE_RANK 
FROM PRODUCTS;

WITH CTE AS (SELECT PRODUCT_ID, PRODUCT_NAME, GROUP_ID, PRICE,
			 RANK() OVER (PARTITION BY GROUP_ID ORDER BY PRICE DESC) PRICE_RANK,
			 DENSE_RANK () OVER (PARTITION BY GROUP_ID ORDER BY PRICE DESC) PRICE_DENSE_RANK 
			 FROM PRODUCTS) 
SELECT PRODUCT_ID, PRODUCT_NAME, PRICE
FROM CTE
WHERE PRICE_DENSE_RANK = 1;

SELECT PRODUCT_ID, PRODUCT_NAME, GROUP_ID,
	   ROW_NUMBER() OVER (ORDER BY PRODUCT_ID) "ROW NUMBER",
	   RANK() OVER (ORDER BY PRODUCT_ID) "RANK",
	   DENSE_RANK() OVER (ORDER BY PRODUCT_ID) "DENSE RANK"
FROM PRODUCTS;

-- FIRST_VALUE() AND LAST_VALUE() FUNCTION
SELECT PRODUCT_ID, PRODUCT_NAME, GROUP_ID, PRICE,
	   RANK() OVER (ORDER BY PRICE) RANK_NUMBER,
       FIRST_VALUE(PRODUCT_NAME) OVER (ORDER BY PRICE) LOWEST_PRICE
--     LAST_VALUE(PRODUCT_NAME) OVER (ORDER BY PRICE ASC) HIGHEST_PRICE
FROM PRODUCTS;

SELECT PRODUCT_ID, PRODUCT_NAME, GROUP_ID, PRICE,
       FIRST_VALUE(PRODUCT_NAME) OVER(PARTITION BY GROUP_ID ORDER BY PRICE
       RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LOWEST_PRICE
FROM PRODUCTS;

-- LAG() AND LEAD() FUNCTION
CREATE TABLE SALES(YEAR SMALLINT CHECK(YEAR > 0),
				   GROUP_ID INT NOT NULL,
	               AMOUNT DECIMAL(10,2) NOT NULL,
	               PRIMARY KEY(YEAR,GROUP_ID));

INSERT INTO SALES(YEAR, GROUP_ID, AMOUNT) 
VALUES (2018,1,1474),
   	   (2018,2,1787),
	   (2018,3,1760),
	   (2019,1,1915),
	   (2019,2,1911),
	   (2019,3,1118),
	   (2020,1,1646),
	   (2020,2,1975),
	   (2020,3,1516);
	   
SELECT *
FROM SALES;

SELECT YEAR, SUM(AMOUNT)
FROM SALES
GROUP BY YEAR
ORDER BY YEAR;

WITH CTE AS (SELECT YEAR, SUM(AMOUNT) AMOUNT
			 FROM SALES
			 GROUP BY YEAR
			 ORDER BY YEAR) 
SELECT YEAR, AMOUNT,
	   LAG(AMOUNT,1) OVER (ORDER BY YEAR) PREVIOUS_YEAR_SALES,
	   LEAD(AMOUNT,1) OVER (ORDER BY YEAR) NEXT_YEAR_SALES
FROM CTE;

WITH CTE AS (SELECT YEAR, SUM(AMOUNT) AMOUNT
	         FROM SALES
	         GROUP BY YEAR
	         ORDER BY YEAR), 
	 CTE2 AS (SELECT YEAR, AMOUNT,
		      LAG(AMOUNT,1) OVER (ORDER BY YEAR) PREVIOUS_YEAR_SALES
	          FROM CTE)	
SELECT YEAR, AMOUNT, PREVIOUS_YEAR_SALES, (PREVIOUS_YEAR_SALES - AMOUNT) VARIANCE
FROM CTE2;

WITH CTE AS (SELECT YEAR, SUM(AMOUNT) AMOUNT
			 FROM SALES
			 GROUP BY YEAR
			 ORDER BY YEAR), 
	 CTE2 AS (SELECT YEAR, AMOUNT,
		      LEAD(AMOUNT,1) OVER (ORDER BY YEAR) NEXT_YEAR_SALES
	          FROM CTE)	
SELECT YEAR, AMOUNT, NEXT_YEAR_SALES, (NEXT_YEAR_SALES - AMOUNT) VARIANCE
FROM CTE2;

